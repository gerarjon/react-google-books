{"version":3,"sources":["utils/API.js","pages/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["API","getBookList","book","axios","get","getBooks","saveBook","savedBooks","post","deleteBook","id","delete","Home","state","search","results","error","message","handleInputChange","event","_this","setState","target","value","handleFormSubmit","preventDefault","then","res","data","status","Error","items","catch","err","react_default","a","createElement","Component","App","react_router_dom","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mSAEeA,EAAA,CAEXC,YAAa,SAASC,GAClB,OAAOC,IAAMC,IAAI,iDAAmDF,IAGxEG,SAAU,WACN,OAAOF,IAAMC,IAAI,eAErBE,SAAU,SAASC,GACf,OAAOJ,IAAMK,KAAK,aAAcD,IAEpCE,WAAY,SAASC,GACjB,OAAOP,IAAMQ,OAAO,cAAgBD,KCqB7BE,6MAhCbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTC,MAAO,GACPC,QAAS,wBAGXC,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CAAEP,OAAQK,EAAMG,OAAOC,WAGvCC,iBAAmB,SAAAL,GACjBA,EAAMM,iBACNzB,EAAIC,YAAYmB,EAAKP,MAAMC,QACxBY,KAAM,SAAAC,GACL,GAAwB,UAApBA,EAAIC,KAAKC,OACX,MAAM,IAAIC,MAAMH,EAAIC,KAAKG,OAE3BX,EAAKC,SAAS,CAAEN,QAASY,EAAIC,KAAKG,MAAOf,MAAO,OAEjDgB,MAAO,SAAAC,GAAG,OAAIb,EAAKC,SAAS,CAAEL,MAAOiB,EAAIhB,qFAI5C,OACEiB,EAAAC,EAAAC,cAAA,0BA1BaC,aCcJC,0LAVX,OACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAIC,UAAW/B,aAL1ByB,cCKZO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,KAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB9B,MAAM,SAAAhB,GACL6C,QAAQ7C,MAAM,4CAA6CA,KChEjE+C,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAqB,OAAMH,GAAN,sBAENzB,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACHzB,KAAK,SAAAgD,GAGkB,MAApBA,EAAS7C,SACuD,IAAhE6C,EAASC,QAAQvE,IAAI,gBAAgBwE,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMnD,KAAK,SAAA6B,GACjCA,EAAauB,aAAapD,KAAK,WAC7BoB,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBnB,MAAM,WACL6B,QAAQC,IACN,mEAzDAkB,CAAwB7B,GAHxBD,EAAgBC,MC7BxB8B","file":"static/js/main.edb83c99.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    // Gets searched book from Google Books API\n    getBookList: function(book) {\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + book);\n    },\n    // Gets all books from mongo database\n    getBooks: function() {\n        return axios.get(\"/api/books\");\n    },\n    saveBook: function(savedBooks) {\n        return axios.post(\"/api/books\", savedBooks);\n    },\n    deleteBook: function(id) {\n        return axios.delete(\"/api/books/\" + id);\n    }\n};","import React, { Component } from 'react';\nimport API from '../utils/API';\n\nclass Home extends Component {\n  state = {\n    search: '',\n    results: [],\n    error: '',\n    message: 'Your book is saved'\n  }\n\n  handleInputChange = event => {\n    this.setState({ search: event.target.value })\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    API.getBookList(this.state.search)\n      .then( res => {\n        if (res.data.status === 'error') {\n          throw new Error(res.data.items)\n        }\n        this.setState({ results: res.data.items, error: '' });\n      })\n      .catch( err => this.setState({ error: err.message }))\n  }\n\n  render() {\n    return(\n      <div>\n        allo\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path ='/' component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}